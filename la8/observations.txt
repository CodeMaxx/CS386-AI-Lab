Minimal for the cases
=====================

Task 2.1 Linearly separable

number of hidden layers, number of nodes in each hidden layer, learning rate, batchsize, number of epochs

0, [], 0.9, 100, 10

Here we can do without a hidden layer since we can learn a linear classifier without any hidden layers.

======================================================================================================

Task 2.2 XOR Data Set

number of hidden layers, number of nodes in each hidden layer, learning rate, batchsize, number of epochs

1, [3], 0.9, 100, 30

For 2 nodes in the hidden layer gave accuracy between 60% and 86%. 3 nodes give more than 90% accuracy for 
about 70% of the cases which is quite decent. For other 30% seeds accuracy was usually more than 80%. So 
this can be treated as the minimal configuration required for decent accuracy. It's hard to get a configuration 
which works for all seeds because the dataset and hence it's properties change and 3 nodes may not be enough.

It is known that with 2 nodes in the hidden layer we can learn the XOR function but in this case even after 
trying a lot of combinations of epochs and learning rate I wasn't able to get more than 90% accuracy. 
It also depends a lot on the seed. I believe the epoch required for 90% accuracy would probably be too 
high which is not worth exploring and just increases the time taken by the algorithm. Adding a new node is a 
cheaper solution. Also since the system is not very large, it is possible it is getting stuck in local minimas 
and not converging with 2 nodes in hidden layer.

=====================================================================================================

Task 2.3 Circle Data set

number of hidden layers, number of nodes in each hidden layer, learning rate, batchsize, number of epochs

1, [3], 3, 100, 30

With 2 nodes in the hidden layer, the accuracy remained around 70%. With 3 nodes it was more than 90% for more 
than 90% of the seeds I tried. Here we have to learn the centre(x,y) and the radius of the circle(r), thus it 
seems fair that for a good accuracy we would require 3 nodes. Since it's not linearly separable data we can't 
have just 1 node in the layer. With 2 nodes the system is just not complex enough to learn the circular 
classifier and hence not achieving that good an accuracy.

I tried a higher learning rate this time (3) which worked better than 0.9

=======================================================================================================

Task 2.4 Semicircle Data Set

number of hidden layers, number of nodes in each hidden layer, learning rate, batchsize, number of epochs

1, [2], 3, 100, 30

This gives high accuracy(95% +) with just two nodes in the hidden layer. My guess is that this is because there 
is some linearity in the data... for e.g. if x < 0 or y < 0 we can directly say which category the point 
belongs to. The amount of linearity is greater than that of the circle and thus we did expect less number of 
nodes to be required for this. With 1 node in the layer, we get around 80%. This is because the data is not 
completely linear. More specifically about half of the points in the first quadrant get misclassified by the 
classifier as it tries (and succeeds) to properly classify points in second and fourth quadrant.

========================================================================================================

Task 3 MNIST

number of hidden layers, number of nodes in each hidden layer, learning rate, batchsize, number of epochs

1, [21], 5, 100, 21

This configuration gives more than 90% accuracy for most of the seeds.